# .cursorrules for SpotWrap Next

## 📘 Project Overview
SpotWrap Next is a desktop application built using Go and Wails for the backend, and Vue.js with TypeScript for the frontend.

---

## 🔍 File Patterns
The following file types are included for analysis and tooling:
- Included: `**/*.go`, `**/*.vue`, `**/*.ts`
- Excluded: 
  - `node_modules/`
  - `dist/`
  - `vendor/`
  - `frontend/wailsjs/`

---

## 🛠 Tasks

| Name              | Command                                      | Description                          |
|-------------------|----------------------------------------------|--------------------------------------|
| Build             | `wails build`                                | Build the entire application         |
| Dev               | `wails dev`                                  | Run the app in development mode      |
| Frontend Dev      | `cd frontend && npm run dev`                 | Run frontend only in dev mode        |
| Frontend Build    | `cd frontend && npm run build`               | Build the frontend                   |
| Run No GUI        | `./spotwrap-next --no-gui`                   | Run the app in background mode       |

---

## ⚙ Tools & Versions

| Tool      | Version    |
|-----------|------------|
| Go        | >=1.23.0   |
| Node.js   | >=18.0.0   |
| npm       | >=8.0.0    |

---

## 🧹 Formatters and Linters

| Language    | Formatter | Linter          |
|-------------|-----------|-----------------|
| Go          | gofmt     | golangci-lint   |
| TypeScript  | prettier  | eslint          |
| Vue         | prettier  | eslint          |

---

## 🧱 Project Structure

### Backend (Go)

- Entry point: `main.go`
- Modules:
  - `autostart/`
  - `spotdl/`
  - `utils/`
  - `database/`
  - `notifications/`
  - `api/`

### Frontend (Vue.js + TypeScript)

- Root: `frontend/`
- Entry file: `frontend/src/main.ts`
- Folders:
  - Components: `frontend/src/components/`
  - Views: `frontend/src/views/`
  - Assets: `frontend/src/assets/`
  - i18n: `frontend/src/i18n/`
  - Store: `frontend/src/store/`

---

## ✅ Best Practices

### Backend
- Use Go idioms for clean and readable code.
- Keep logic encapsulated in modules under `backend/`.
- Use Wails bindings to expose Go methods to the frontend.
- Structure errors and logging clearly for frontend use.

### Frontend
- Follow Vue 3 composition API conventions.
- Use Prettier and ESLint to enforce consistent code style.
- Organize UI logic in components and views clearly.
- Handle backend interaction with `await` and `try/catch`.

---

## 📌 Recommendations

- Keep the `wailsjs` directory ignored to avoid conflicts in code intelligence.
- Use the defined tasks for consistent local development and builds.
- Keep formatters and linters integrated with your editor or CI pipeline.

